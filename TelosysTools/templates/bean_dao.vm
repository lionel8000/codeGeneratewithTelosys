#set ( $AUTO_INCR_KEY = false )
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.isAutoIncremented() )
#set ( $AUTO_INCR_KEY = true )
#end
#end
## BEAN的名字 City
#set ( $BNAME = "${beanClass.name}" )
## BEAN类的对象名 city
#set ( $BNAME_V = $beanClass.name.substring(0,1).toLowerCase() + $beanClass.name.substring(1) )
#set ( $BNAME_DAO = ${beanClass.name} + "Dao" )
#set ( $BNAME_DAO_V = $BNAME_DAO.substring(0,1).toLowerCase() + $BNAME_DAO.substring(1) )
## 主键组合，例如key1 key2 则为Key1Key2
#set ( $KEYS = "" )
## 主键变量 例如key1 key2 则为int key1,int key2
#set ( $KEYS_PAR = "" )
##主键返回类型，其实没用处 例如key1 key2 则为int,int
#set ( $KEYS_TYPE = "" )
##主键属性的获取。例如city.getId(),如果是多个主键则为 city,getId(),city.getId2()
#set ( $KEYS_PAR_BEAN = "" )
##主键属性变量的获取。例如id1,id2
#set ( $KEYS_PAR_NODECLARE = "" )
##主键属性变量的获取。例如city.getId1(),city.getId2()
#set ( $BEAN_V_KEY_GETTER = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS = $KEYS+$field.name.substring(0,1).toUpperCase()+$field.name.substring(1))
#set ( $KEYS_PAR = $KEYS_PAR+ "," + $field.type +" " + $field.name )
#set ( $KEYS_TYPE = $KEYS_TYPE+ "," + $field.type)
#set ( $KEYS_PAR_BEAN = $KEYS_PAR_BEAN+ "," + $BNAME_V +"." + $field.getter+"()" )
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE+ ","+$field.name )
#set ($BEAN_V_KEY_GETTER = $BEAN_V_KEY_GETTER +","+ ${BNAME_V}+"."+${field.getter}+"()")
#end
#set ( $KEYS_PAR = $KEYS_PAR.substring(1) )
#set ( $KEYS_TYPE = $KEYS_TYPE.substring(1) )
#set ( $KEYS_PAR_BEAN = $KEYS_PAR_BEAN.substring(1) )
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE.substring(1) )
#set ( $BEAN_V_KEY_GETTER = $BEAN_V_KEY_GETTER.substring(1) )
##主键变量集合，例如id1,id2,id3
#set ( $SQL_KEY_NAMES = "" )
#set ( $SQL_KEY_AS_NAMES = "" )
##主键变量集合占位符，例如id1,id2,id3 则得到?,?,?
#set ( $SQL_KEY_NAMES_Q = "" )
##主键变量集合，例如city.getId1(),city.getId2()
#set ( $SQL_KEY_BEAN_GETTER = "" )
##主键变量集合用于查询修改，例如id1=?,id2=?,id3=?
#set ( $SQL_UPDATE_KEY_Q = "" )
#set ( $SQL_SELECT_KEY_AS_Q = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $SQL_KEY_NAMES = $SQL_KEY_NAMES+ ","+$field.databaseName)
#set ( $SQL_KEY_AS_NAMES = $SQL_KEY_AS_NAMES+ ","+${BNAME}+"."+$field.databaseName + " as " + $field.name)
#set ( $SQL_KEY_NAMES_Q = $SQL_KEY_NAMES_Q+ ",?")
#set ( $SQL_KEY_BEAN_GETTER = $SQL_KEY_BEAN_GETTER+ ","+$BNAME_V + "." + $field.getter+"()")
#set ( $SQL_UPDATE_KEY_Q = $SQL_UPDATE_KEY_Q + " and $field.databaseName=?")
#set ( $SQL_SELECT_KEY_AS_Q = $SQL_SELECT_KEY_AS_Q + " and "+${BNAME}+"."+"$field.databaseName=?")
#end
#set ( $SQL_KEY_NAMES = $SQL_KEY_NAMES.substring(1) )
#set ( $SQL_KEY_AS_NAMES = $SQL_KEY_AS_NAMES.substring(1) )
#set ( $SQL_KEY_NAMES_Q = $SQL_KEY_NAMES_Q.substring(1) )
#set ( $SQL_KEY_BEAN_GETTER = $SQL_KEY_BEAN_GETTER.substring(1) )
#set ( $SQL_UPDATE_KEY_Q = $SQL_UPDATE_KEY_Q.substring(4) )
#set ( $SQL_SELECT_KEY_AS_Q = $SQL_SELECT_KEY_AS_Q.substring(4) )
##变量集合，例如id1,id2,id3
#set ( $SQL_NOKEY_NAMES = "" )
#set ( $SQL_NOKEY_AS_NAMES = "" )
##主键变量集合占位符，例如id1,id2,id3 则得到?,?,?
#set ( $SQL_NOKEY_NAMES_Q = "" )
##主键变量集合，例如city.getId1(),city.getId2()
#set ( $SQL_NOKEY_BEAN_GETTER = "" )
##主键变量集合用于更新，例如column1=?,column2=?,column3=?
#set ( $SQL_UPDATE_NOKEY_Q = "" )
#foreach($field in $beanClass.nonKeyAttributes)
#set ( $SQL_NOKEY_NAMES = $SQL_NOKEY_NAMES+ ","+$field.databaseName)
#set ( $SQL_NOKEY_AS_NAMES = $SQL_NOKEY_AS_NAMES+ ","+${BNAME}+"."+$field.databaseName + " as " + $field.name)
#set ( $SQL_NOKEY_NAMES_Q = $SQL_NOKEY_NAMES_Q+ ",?")
#set ( $SQL_NOKEY_BEAN_GETTER = $SQL_NOKEY_BEAN_GETTER+ ","+$BNAME_V + "." + $field.getter+"()")
#set ( $SQL_UPDATE_NOKEY_Q = $SQL_UPDATE_NOKEY_Q + ",$field.databaseName=?")
#end
#set ( $SQL_NOKEY_NAMES = $SQL_NOKEY_NAMES.substring(1) )
#set ( $SQL_NOKEY_AS_NAMES = $SQL_NOKEY_AS_NAMES.substring(1) )
#set ( $SQL_NOKEY_NAMES_Q = $SQL_NOKEY_NAMES_Q.substring(1) )
#set ( $SQL_NOKEY_BEAN_GETTER = $SQL_NOKEY_BEAN_GETTER.substring(1) )
#set ( $SQL_UPDATE_NOKEY_Q = $SQL_UPDATE_NOKEY_Q.substring(1) )
#if  ($AUTO_INCR_KEY)
##插入语句  (id,name_id,cr_date) values(?,?,?)
#set ( $INSERT_SQL = "(" + $SQL_NOKEY_NAMES +")  values(" + $SQL_NOKEY_NAMES_Q +")")
##插入语句参数  city.getId(),city.getNameid(),city.getCr_date()
#set ( $INSERT_SQL_PARM = $SQL_NOKEY_BEAN_GETTER)
#else
#set ( $INSERT_SQL = "("+$SQL_KEY_NAMES+","+$SQL_NOKEY_NAMES+")  values(" +$SQL_KEY_NAMES_Q+"," + $SQL_NOKEY_NAMES_Q +")")
#set ( $INSERT_SQL_PARM = $SQL_KEY_BEAN_GETTER + ","+$SQL_NOKEY_BEAN_GETTER)
#end
##更新时候传入的参数，主键值在最后
#set ( $UPDATE_SQL_PARM = $SQL_NOKEY_BEAN_GETTER + ","+$SQL_KEY_BEAN_GETTER) 
## 更新时候，SQL语句中的 where id=? 
#set ( $SQL_UPDATE_KEY_Q_WITHWHERE = " where " + $SQL_UPDATE_KEY_Q)
#set ( $SQL_SELECT_BYKEY_Q_WITHWHERE = " as "+${BNAME}+" where " + $SQL_SELECT_KEY_AS_Q)
##更新时候set后面的语句
#set ( $SQL_UPDATE_SET_TO_END = " set " +  "$SQL_UPDATE_NOKEY_Q" +  "$SQL_UPDATE_KEY_Q_WITHWHERE")
##
#set ( $SQL_DELETE_WHERE_TO_END = " where " + $SQL_UPDATE_KEY_Q)
#set ( $SQL_GET_BY_KEY = "select " + $SQL_KEY_AS_NAMES + " ," + $SQL_NOKEY_AS_NAMES + " from ")
#set ( $TABLE_WITH_AS = "TABLE" + ' +" as '+ ${BNAME}+ '" ')
package ${target.javaPackageFromFolder($SRC)};

import com.hlj.tech.kdkj.common.ParameterCheck;
import $beanClass.fullName;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import com.bstek.bdf.pagination.CoreJdbcDaoSupport;
import com.bstek.bdf.pagination.Pagination;
import com.bstek.bdf.context.ContextHolder;


/**
 * @author lionel.xu@bstek.com
 * @since 1.0
 */
@Repository
public class ${BNAME}Dao extends CoreJdbcDaoSupport {

    private static Logger log = LoggerFactory.getLogger(${BNAME}Dao.class);  

    private static String TABLE = "${beanClass.sqlTable}";

	public $KEYS_TYPE insert${BNAME}(${BNAME} $BNAME_V) throws Exception {
		String sql = "insert into "+TABLE +"$INSERT_SQL";
		Object args[] = new Object[] { $INSERT_SQL_PARM };
		if(log.isDebugEnabled()){
			log.debug("insert${BNAME} : SQL IS : " + sql + " : PARAM IS : " + args);
		}
		this.getJdbcTemplate().update(sql, args);
#if ( $AUTO_INCR_KEY == true )
#foreach($field in $beanClass.keyAttributes)
		${BNAME_V}.${field.setter}(this.getJdbcTemplate().queryForInt("select last_insert_id()"));
#end
#end		
        return $BEAN_V_KEY_GETTER;
	}

	
	
	public $KEYS_TYPE insert${BNAME}Selective(${BNAME} $BNAME_V) throws Exception {
		StringBuffer columns = new StringBuffer();
		StringBuffer questions = new StringBuffer(30);
		List<Object> params = new ArrayList<Object>();
#if ( $AUTO_INCR_KEY == false )
#foreach($field in $beanClass.keyAttributes)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
#set ( $COMMA_FILED = "," + $field.databaseName)
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}
#end
#end	


#foreach($field in $beanClass.nonKeyAttributes)
#set ( $FILEDNAME = ${field.name})
#set ( $COMMA_FILED = "," + $field.databaseName)
#if ($FILEDNAME.indexOf("createDate") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}else{
			columns.append("$COMMA_FILED");
			questions.append(",now()");
		}
#elseif ($FILEDNAME.indexOf("updateDate") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}else{
			columns.append("$COMMA_FILED");
			questions.append(",now()");
		}
#elseif ($FILEDNAME.indexOf("createBy") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}else{
			params.add(ContextHolder.getContext().getLoginUsername());
			columns.append("$COMMA_FILED");
			questions.append(",now()");
		}
#elseif ($FILEDNAME.indexOf("updateBy") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}else{
			params.add(ContextHolder.getContext().getLoginUsername());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}
#else 
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
			questions.append(",?");
		}
#end
#end		
		String sql = "insert into " + TABLE + "(" + columns.toString().substring(1) + ") values(" + questions.toString().substring(1) +")";
		if(log.isDebugEnabled()){
			log.debug("insert${BNAME}Selective : SQL IS : " + sql + " : PARAM IS : " + params.toArray());
		}
		this.getJdbcTemplate().update(sql, params.toArray());
		
		
		
#if ( $AUTO_INCR_KEY == true )
#foreach($field in $beanClass.keyAttributes)
		${BNAME_V}.${field.setter}(this.getJdbcTemplate().queryForInt("select last_insert_id()"));
#end
#end
		return $BEAN_V_KEY_GETTER;
	}
	
	
	
	public void delete${BNAME}By$KEYS($KEYS_PAR) throws Exception {
		String sql = "delete from " +TABLE +"$SQL_DELETE_WHERE_TO_END";
		Object args[] = new Object[] {$KEYS_PAR_NODECLARE};

		if(log.isDebugEnabled()){
			log.debug("delete${BNAME}By$KEYS : SQL IS : " + sql + " : PARAM IS : " + args);
		}
		this.getJdbcTemplate().update(sql, args);
	}
	
	
    
	public void delete${BNAME}ByBean(${BNAME} $BNAME_V) throws Exception{
		List<Object> params = new ArrayList<Object>();
  		StringBuffer columns = new StringBuffer();
#foreach($field in $beanClass.nonKeyAttributes)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
#set ( $COMMA_FILED = "and " + $field.databaseName + "=? ")
			columns.append("$COMMA_FILED");
		}
#end

		String sql = "delete from " +TABLE + " where " +columns.toString().substring(4);
		if(log.isDebugEnabled()){
			log.debug("delete${BNAME}ByBean : SQL IS : " + sql + " : PARAM IS : " + params.toArray());
		}
	    this.getJdbcTemplate().update(sql,params.toArray());
	}
	
	
	
	public void update${BNAME}(${BNAME} $BNAME_V) throws Exception {
		String sql = "update " +TABLE +"$SQL_UPDATE_SET_TO_END";
		Object args[] = new Object[] {$UPDATE_SQL_PARM};
		if(log.isDebugEnabled()){
			log.debug("update${BNAME} : SQL IS : " + sql + " : PARAM IS : " + args);
		}
		this.getJdbcTemplate().update(sql, args);
	}
	
	
	
	public void update${BNAME}Selective(${BNAME} $BNAME_V) throws Exception {
		List<Object> params = new ArrayList<Object>();
        StringBuffer columns = new StringBuffer();
        String keys = "";
#foreach($field in $beanClass.nonKeyAttributes)
#set ( $FILEDNAME = ${field.name})
#set ( $COMMA_FILED = "," + $field.databaseName +"=?")
#if ($FILEDNAME.indexOf("updateDate") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
		}else{
#set ( $COMMA_FILED = "," + $field.databaseName +"=now()")
   			columns.append("$COMMA_FILED");
		}
#elseif ($FILEDNAME.indexOf("updateBy") == 0)
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
		}else{
			params.add(ContextHolder.getContext().getLoginUsername());
			columns.append("$COMMA_FILED");
		}
#else
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
			columns.append("$COMMA_FILED");
		}
#end
#end		

#foreach($field in $beanClass.keyAttributes)
		
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			params.add(${BNAME_V}.${field.getter}());
#set ( $COMMA_FILED = "and " + $field.databaseName +"=? ")			
			keys += "$COMMA_FILED";
		}
#end
		String sql = "update " + TABLE + " set " +columns.toString().substring(1)+" where "+keys.substring(4);
		if(log.isDebugEnabled()){
			log.debug("update${BNAME}Selective : SQL IS : " + sql + " : PARAM IS : " + params.toArray());
		}
		this.getJdbcTemplate().update(sql, params.toArray());
	}
	
	
		
	
	public ${BNAME} get${BNAME}By$KEYS($KEYS_PAR) {
		String sql = "$SQL_GET_BY_KEY"+TABLE+"$SQL_SELECT_BYKEY_Q_WITHWHERE";
		if(log.isDebugEnabled()){
			log.debug("get${BNAME}By$KEYS : SQL IS : " + sql + " : PARAM IS : " + $KEYS_PAR_NODECLARE);
		}
		List<${BNAME}> ${BNAME_V}List = this.getJdbcTemplate().query(sql,new Object[]{$KEYS_PAR_NODECLARE}, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		return ${BNAME_V}List.size() > 0 ? ${BNAME_V}List.get(0) : null;

	}
	
	
	
	public Collection<${BNAME}> getAll${BNAME}(Map<String, Object> parameter) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
		if(parameter != null){
#foreach($field in $beanClass.keyAttributes)
            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
#foreach($field in $beanClass.nonKeyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
		}
		if(log.isDebugEnabled()){
			log.debug("getAll${BNAME} : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
		}
		if(withParameter){
			return this.getJdbcTemplate().query(sql+ sb.toString(),params.toArray(), ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
			return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		
	}
	
	
	
	public Collection<${BNAME}> getAll${BNAME}ByBean(${BNAME} $BNAME_V) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
#foreach($field in $beanClass.keyAttributes)
            
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
#foreach($field in $beanClass.nonKeyAttributes)

		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
		if(log.isDebugEnabled()){
			log.debug("getAll${BNAME}ByBean : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
		}
		if(withParameter){
			return this.getJdbcTemplate().query(sql+ sb.toString(),params.toArray(), ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
			return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		
	}
	
	
	
	public Pagination<${BNAME}> getPageAll${BNAME}ByCondition(Map<String, Object> parameter, int pageIndex, int pageSize) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		String countSql = "select count(*) from "+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
		if(parameter != null){
#foreach($field in $beanClass.keyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
				withParameter = true;   
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
#foreach($field in $beanClass.nonKeyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
		}
		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		if(log.isDebugEnabled()){
			log.debug("getPageAll${BNAME}ByCondition : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
			log.debug("pageIndex : " + pageIndex + "   pageSize:  " + pageSize);
		}
		if(withParameter){
			this.paginationQuery(sql + sb.toString(),countSql + sb.toString(), params.toArray(), page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
		    this.paginationQuery(sql,countSql ,page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		return page;
	}
	
	
	
	public Pagination<${BNAME}> getPageAll${BNAME}ByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		String countSql = "select count(*) from "+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
#foreach($field in $beanClass.keyAttributes)

		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			withParameter = true;   
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
#foreach($field in $beanClass.nonKeyAttributes)
        
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end

		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		if(log.isDebugEnabled()){
			log.debug("getPageAll${BNAME}ByBean : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
			log.debug("pageIndex : " + pageIndex + "   pageSize:  " + pageSize);
		}
		if(withParameter){
			this.paginationQuery(sql + sb.toString(),countSql + sb.toString(), params.toArray(), page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
		    this.paginationQuery(sql,countSql ,page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		return page;
	}
	
	
	
	public List<${BNAME}> getAll${BNAME}(){
		String sql = "$SQL_GET_BY_KEY" + $TABLE_WITH_AS;			
		return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		
	}
	
	
	
	public Pagination<${BNAME}> getPageAll${BNAME}(int pageIndex, int pageSize) {
		String sql ="$SQL_GET_BY_KEY" + $TABLE_WITH_AS;
		String countSql = "select count(*) from " + TABLE;
		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		this.paginationQuery(sql,countSql, page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		return page;
	}
	
	

	public class ${BNAME}RowMapper implements RowMapper<${BNAME}> {
		public ${BNAME} mapRow(ResultSet rs, int rowNum) throws SQLException {
			${BNAME} ${BNAME_V} = new ${BNAME}();
#foreach($field in $beanClass.keyAttributes)
#set ( $getWithType = "get" + $field.type.substring(0,1).toUpperCase()+$field.type.substring(1))
#if ($field.type == "Integer")
#set ( $getWithType = "getInt" )
#end
        	${BNAME_V}.${field.setter}(rs.${getWithType}("$field.name"));
#end	
#foreach($field in $beanClass.nonKeyAttributes)
#set ( $getWithType = "get" + $field.type.substring(0,1).toUpperCase()+$field.type.substring(1))
#if ($field.type == "Integer")
#set ( $getWithType = "getInt" )
#end
			${BNAME_V}.${field.setter}(rs.${getWithType}("$field.name"));
#end
			return ${BNAME_V};
		}
	}
}