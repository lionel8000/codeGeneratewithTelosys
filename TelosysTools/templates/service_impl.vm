#set ( $BNAME = "${beanClass.name}" )
#set ( $BNAME_V = $beanClass.name.substring(0,1).toLowerCase() + $beanClass.name.substring(1) )
#set ( $BNAME_DAO = ${beanClass.name} + "Dao" )
#set ( $BNAME_DAO_V = $BNAME_DAO.substring(0,1).toLowerCase() + $BNAME_DAO.substring(1) )
#set ( $KEYS = "" )
#foreach($singlekey in $beanClass.keyAttributes)
#set ( $KEYS = $KEYS+$singlekey.name.substring(0,1).toUpperCase()+$singlekey.name.substring(1))
#end
#set ( $KEYS_PAR = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_PAR = $KEYS_PAR+ "," + $field.type +" " + $field.name )
#end
#set ( $KEYS_PAR = $KEYS_PAR.substring(1) )
#set ( $KEYS_PAR_NODECLARE = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE+ ","+$field.name )
#end
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE.substring(1) )
#set ( $KEYS_TYPE = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_TYPE = $KEYS_TYPE+ "," + $field.type)
#end
#set ( $KEYS_TYPE = $KEYS_TYPE.substring(1) )
#set ( $BASE_PACKAGE = $beanClass.package.substring(0,$beanClass.package.lastIndexOf(".")))
package ${target.javaPackageFromFolder($SRC)} ;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${BASE_PACKAGE}.dao.$BNAME_DAO;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import $beanClass.fullName;
import com.bstek.bdf.pagination.Pagination;
import javax.annotation.Resource;
import org.springframework.stereotype.Component;

@Component
public class ${BNAME}ServiceImpl implements ${BNAME}Service{

    private static Logger log = LoggerFactory.getLogger(${BNAME}ServiceImpl.class);    

    @Resource
	$BNAME_DAO $BNAME_DAO_V;
    
	@Deprecated
	public $KEYS_TYPE insert(${BNAME} $BNAME_V) throws Exception{
	    return ${BNAME_DAO_V}.insert($BNAME_V);
	}
    
	public $KEYS_TYPE insertSelective(${BNAME} $BNAME_V) throws Exception {
	    return ${BNAME_DAO_V}.insertSelective($BNAME_V);
	}
	
	
	public void deleteBy$KEYS($KEYS_PAR) throws Exception{
		${BNAME_DAO_V}.deleteBy$KEYS($KEYS_PAR_NODECLARE);
	}

	public void deleteByBean(${BNAME} $BNAME_V) throws Exception{
		${BNAME_DAO_V}.deleteByBean($BNAME_V);
	}
	
	@Deprecated
	public void update(${BNAME} $BNAME_V) throws Exception{
		${BNAME_DAO_V}.update($BNAME_V);
	}

  	public void updateSelective(${BNAME} $BNAME_V) throws Exception {
	    ${BNAME_DAO_V}.updateSelective($BNAME_V);
    }
	
	public ${BNAME} getBy$KEYS($KEYS_PAR){
		return ${BNAME_DAO_V}.getBy$KEYS($KEYS_PAR_NODECLARE);
	}

	public List<${BNAME}> getAll(){
		return ${BNAME_DAO_V}.getAll();
	}

	public Collection<${BNAME}> getAll(Map<String, Object> parameter){
		return ${BNAME_DAO_V}.getAll(parameter);
	}
    
	public Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V) {
		return ${BNAME_DAO_V}.getAllByBean($BNAME_V);
	}

	
	public Pagination<${BNAME}> getPageAllByCondition(Map<String, Object> map, int pageIndex,int pageSize){
		return ${BNAME_DAO_V}.getPageAllByCondition(map,pageIndex,pageSize);	
	}
    
	public Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize) {
		return ${BNAME_DAO_V}.getPageAllByBean($BNAME_V,pageIndex,pageSize);	
	}

	
	public Pagination<${BNAME}> getPageAll(int pageIndex,int pageSize){
		return ${BNAME_DAO_V}.getPageAll(pageIndex,pageSize);
	}

}
