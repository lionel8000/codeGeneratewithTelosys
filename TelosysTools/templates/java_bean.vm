/*
 * Java bean class for entity table ${beanClass.sqlTable} 
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

#set ( $bean_jpa="1" )
package ${target.javaPackageFromFolder($SRC)} ;

import java.io.Serializable;

#foreach( $import in $beanClass.imports )
import $import;
#end

/**
 * Entity bean for table "${beanClass.sqlTable}"
 * 
 * @author Telosys Tools Generator
 *
 */
public class $beanClass.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#foreach( $field in $beanClass.keyAttributes )
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end; // Primary Key
#end

#foreach( $field in $beanClass.nonKeyAttributes )
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end
#foreach( $link in $beanClass.links )
    private $link.formatedType(10) $link.formatedName(12);
#end
    /**
     * Default constructor
     */
    public ${beanClass.name}()
    {
        super();
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
#foreach( $field in $beanClass.keyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", ) 
#end
     * @param $field.name
     */
	public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", ) 
#end
     * @return the field value
     */
	public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $beanClass.nonKeyAttributes )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType" ) 
#end
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType" ) 
#end
     * @return the field value
     */
    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end

#end  
#foreach( $link in $beanClass.links )
#if ( $link.setter )    public void ${link.setter}( ${link.linkType} ${link.javaName} )
    {
        this.${link.javaName} = ${link.javaName};
    }
#end
#if ( $link.getter )    public ${link.linkType} ${link.getter}()
    {
        return this.${link.javaName};
    }
#end

#end      

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString()
    {
$beanClass.toStringMethodCodeLines(8)
    }

}
