#set ( $AUTO_INCR_KEY = false )
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.isAutoIncremented() )
#set ( $AUTO_INCR_KEY = true )
#end
#end
## BEAN的名字 City
#set ( $BNAME = "${beanClass.name}" )
## BEAN类的对象名 city
#set ( $BNAME_V = $beanClass.name.substring(1,2).toLowerCase() + $beanClass.name.substring(2) )
#set ( $BNAME_DAO = ${beanClass.name} + "Dao" )
#set ( $BNAME_DAO_V = $BNAME_DAO.substring(0,1).toLowerCase() + $BNAME_DAO.substring(1) )
##变量集合，例如id1,id2,id3
#set ( $SQL_NOKEY_NAMES = "" )
#set ( $SQL_NOKEY_AS_NAMES = "" )
##主键变量集合占位符，例如id1,id2,id3 则得到?,?,?
#set ( $SQL_NOKEY_NAMES_Q = "" )
##主键变量集合，例如city.getId1(),city.getId2()
#set ( $SQL_NOKEY_BEAN_GETTER = "" )
##主键变量集合用于更新，例如column1=?,column2=?,column3=?
#set ( $SQL_UPDATE_NOKEY_Q = "" )
#foreach($field in $beanClass.nonKeyAttributes)
#set ( $SQL_NOKEY_NAMES = $SQL_NOKEY_NAMES+ ","+$field.databaseName)
#set ( $SQL_NOKEY_AS_NAMES = $SQL_NOKEY_AS_NAMES+ ","+${BNAME}+"."+$field.databaseName + " as " + $field.name)
#set ( $SQL_NOKEY_NAMES_Q = $SQL_NOKEY_NAMES_Q+ ",?")
#set ( $SQL_NOKEY_BEAN_GETTER = $SQL_NOKEY_BEAN_GETTER+ ","+$BNAME_V + "." + $field.getter+"()")
#set ( $SQL_UPDATE_NOKEY_Q = $SQL_UPDATE_NOKEY_Q + ",$field.databaseName=?")
#end
#set ( $SQL_NOKEY_NAMES = $SQL_NOKEY_NAMES.substring(1) )
#set ( $SQL_NOKEY_AS_NAMES = $SQL_NOKEY_AS_NAMES.substring(1) )
#set ( $SQL_NOKEY_NAMES_Q = $SQL_NOKEY_NAMES_Q.substring(1) )
#set ( $SQL_NOKEY_BEAN_GETTER = $SQL_NOKEY_BEAN_GETTER.substring(1) )
#set ( $SQL_UPDATE_NOKEY_Q = $SQL_UPDATE_NOKEY_Q.substring(1) )
#set ( $SQL_GET_BY_KEY = "select " + $SQL_NOKEY_AS_NAMES + " from ")
#set ( $TABLE_WITH_AS = "TABLE" + ' +" as '+ ${BNAME}+ '" ')
package ${target.javaPackageFromFolder($SRC)};

import com.kdkj.p2p.utils.ParameterCheck;
import $beanClass.fullName;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import com.bstek.bdf.pagination.CoreJdbcDaoSupport;
import com.bstek.bdf.pagination.Pagination;
import com.bstek.bdf.context.ContextHolder;


/**
 * @author lionel.xu@bstek.com
 * @since 1.0
 */
@Repository
public class ${BNAME}Dao extends CoreJdbcDaoSupport {

    private static Logger log = LoggerFactory.getLogger(${BNAME}Dao.class);  

    private static String TABLE = "${beanClass.sqlTable}";
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
		public Collection<${BNAME}> getAll(Map<String, Object> parameter) {
#set ($HASCREATEDATE = false)
#set ($HASUPDATEDATE = false)
#set ($HASDATE = false)
#foreach( $field in $beanClass.nonKeyAttributes )
#if ($field.name == "createDate")
#set ($HASCREATEDATE = true)
#set ($HASDATE = true)
#end
#if ($field.name == "updateDate")
#set ($HASUPDATEDATE = true)
#set ($HASDATE = true)
#end
#end
#if ($HASDATE == true)
#if ($HASUPDATEDATE == true)
#set ($ORDERNAME = "updateDate")
#else
#set ($ORDERNAME = "createDate")
#end
		return getAll(parameter ,"$ORDERNAME" ,false ,true);
#else
		return getAll(parameter ,"" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public Collection<${BNAME}> getAll(Map<String, Object> parameter ,String orderBy) {
		return getAll(parameter ,orderBy ,true ,true);
	}
	
	/**
	 * get the datat by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public Collection<${BNAME}> getAll(Map<String, Object> parameter ,String orderBy ,boolean asc) {
		return getAll(parameter ,orderBy ,asc ,true);

	}
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public Collection<${BNAME}> getAll(Map<String, Object> parameter ,boolean orderFlag) {
		return getAll(parameter ,"" ,false ,false);
	}
	
	private Collection<${BNAME}> getAll(Map<String, Object> parameter ,String orderBy, boolean asc ,boolean order) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
		if(parameter != null){
#foreach($field in $beanClass.keyAttributes)
            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
#foreach($field in $beanClass.nonKeyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
		}
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sb.append(" order by $BNAME." + orderSql);
		}
		
		if(log.isDebugEnabled()){
			log.debug("getAll : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
		}
		if(withParameter){
			return this.getJdbcTemplate().query(sql+ sb.toString(),params.toArray(), ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
			return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		
	}
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
	public Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V) {
#if ($HASDATE == true)
		return getAllByBean($BNAME_V ,"$ORDERNAME" ,false ,true);
#else
		return getAllByBean($BNAME_V ,"" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V ,String orderBy) {
		return getAllByBean($BNAME_V ,orderBy ,true ,true);
	}
	
	/**
	 * get the datat by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V ,String orderBy ,boolean asc) {
		return getAllByBean($BNAME_V ,orderBy ,asc ,true);
	}
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V ,boolean orderFlag) {
		return getAllByBean($BNAME_V ,"" ,false ,false);
	}
	
	
	private Collection<${BNAME}> getAllByBean(${BNAME} $BNAME_V,String orderBy,boolean asc,boolean order) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
#foreach($field in $beanClass.keyAttributes)
            
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
#foreach($field in $beanClass.nonKeyAttributes)

		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+ $field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sb.append(" order by $BNAME." + orderSql);
		}
		if(log.isDebugEnabled()){
			log.debug("getAll${BNAME}ByBean : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
		}
		if(withParameter){
			return this.getJdbcTemplate().query(sql+ sb.toString(),params.toArray(), ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
			return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		
	}
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(Map<String, Object> parameter, int pageIndex, int pageSize) {
#if ($HASDATE == true)
		return getPageAll(parameter ,pageIndex ,pageSize ,"$ORDERNAME" ,false ,true);
#else
		return getPageAll(parameter ,pageIndex ,pageSize ,"" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(Map<String, Object> parameter, int pageIndex, int pageSize, String orderBy) {
		return getPageAll((parameter ,pageIndex ,pageSize ,orderBy ,true ,true);
	}
	
	/**
	 * get the datat by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(Map<String, Object> parameter, int pageIndex, int pageSize, String orderBy, boolean asc) {
		return getPageAll((parameter ,pageIndex ,pageSize ,orderBy ,asc ,true);
	}
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(Map<String, Object> parameter, int pageIndex, int pageSize, boolean orderFlag) {
		return getPageAll((parameter ,pageIndex ,pageSize ,"" ,false ,false);
	}
	
	
	private Pagination<${BNAME}> getPageAll(Map<String, Object> parameter, int pageIndex, int pageSize ,String orderBy ,boolean asc ,boolean order) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		String countSql = "select count(*) from "+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
		if(parameter != null){
#foreach($field in $beanClass.keyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
				withParameter = true;   
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
#foreach($field in $beanClass.nonKeyAttributes)

            if(ParameterCheck.hasValue(parameter.get("$field.name"))){
			    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
				sb.append("$CONDITION_ITEM");
				params.add(parameter.get("$field.name"));
			}
#end
		}
		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sb.append(" order by $BNAME." + orderSql);
		}
		if(log.isDebugEnabled()){
			log.debug("getPageAll${BNAME}ByCondition : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
			log.debug("pageIndex : " + pageIndex + "   pageSize:  " + pageSize);
		}
		if(withParameter){
			this.paginationQuery(sql + sb.toString(),countSql + sb.toString(), params.toArray(), page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
		    this.paginationQuery(sql,countSql ,page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		return page;
	}
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
	public Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize) {
#if ($HASDATE == true)
		return getPageAllByBean($BNAME_V ,pageIndex ,pageSize ,"$ORDERNAME" ,false ,true);
#else
		return getPageAllByBean($BNAME_V ,pageIndex ,pageSize ,"" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize,String orderBy) {
			return getPageAllByBean($BNAME_V ,pageIndex ,pageSize ,orderBy ,true ,true);
	}
	
	/**
	 * get the data by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize,String orderBy,boolean asc) {
		return getPageAllByBean($BNAME_V ,pageIndex ,pageSize ,orderBy ,asc ,true);
	}
	
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize,boolean orderFlag) {
		return getPageAllByBean($BNAME_V ,pageIndex ,pageSize ,"" ,false ,false);
	}
	
	
	private Pagination<${BNAME}> getPageAllByBean(${BNAME} $BNAME_V, int pageIndex, int pageSize ,String orderBy,boolean asc,boolean order) {
		String sql = "$SQL_GET_BY_KEY"+$TABLE_WITH_AS+" where 1=1 ";
		String countSql = "select count(*) from "+$TABLE_WITH_AS+" where 1=1 ";
		StringBuffer sb = new StringBuffer(" ");
		List<Object> params = new ArrayList<Object>();
		boolean withParameter = false; 
#foreach($field in $beanClass.keyAttributes)

		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
			withParameter = true;   
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end
#foreach($field in $beanClass.nonKeyAttributes)
        
		if(ParameterCheck.hasValue(${BNAME_V}.${field.getter}())){
		    withParameter = true;    
#set ( $CONDITION_ITEM = " and " + ${BNAME}+"."+$field.databaseName + "=? " )
			sb.append("$CONDITION_ITEM");
			params.add(${BNAME_V}.${field.getter}());
		}
#end

		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sb.append(" order by $BNAME." + orderSql);
		}
		if(log.isDebugEnabled()){
			log.debug("getPageAll${BNAME}ByBean : SQL IS : " + sql + sb.toString()+ " : PARAM IS : " + params.toArray());
			log.debug("pageIndex : " + pageIndex + "   pageSize:  " + pageSize);
		}
		if(withParameter){
			this.paginationQuery(sql + sb.toString(),countSql + sb.toString(), params.toArray(), page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}else{
		    this.paginationQuery(sql,countSql ,page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		}
		return page;
	}
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
	public List<${BNAME}> getAll(){
#if ($HASDATE == true)
		return getAll("$ORDERNAME" ,false ,true);
#else
		return getAll("" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public List<${BNAME}> getAll(String orderBy){
		return getAll(orderBy ,asc ,order);
	}
	
	/**
	 * get the datat by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public List<${BNAME}> getAll(String orderBy,boolean asc){
		return getAll(orderBy ,asc ,order);
	}
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public List<${BNAME}> getAll(boolean orderFlag){
		return getAll(orderBy ,asc ,order);
	}
	
	private List<${BNAME}> getAll(String orderBy,boolean asc,boolean order){
		String sql = "$SQL_GET_BY_KEY" + $TABLE_WITH_AS;		
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sql += (" order by $BNAME." + orderSql);
		}		
		return this.getJdbcTemplate().query(sql, ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		
	}
	
	/**
	 * if has updateDate or create Date then orderby them:  updateDate first
	 * if has no updateDate or createDate then has no order
	 * @param parameter
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(int pageIndex, int pageSize) {
#if ($HASDATE == true)
		return getPageAll(pageIndex ,pageSize ,"$ORDERNAME" ,false ,true);
#else
		return getPageAll(pageIndex ,pageSize ,"" ,false ,false);
#end
	}
	
	/**
	 * get the data by oderBy ASC
	 * @param parameter
	 * @param orderBy
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(int pageIndex, int pageSize,String orderBy) {
		return getPageAll(pageIndex ,pageSize ,orderBy ,true ,true);
	}
	
	/**
	 * get the datat by orderBy specify by the Asc true asc  false desc
	 * @param parameter
	 * @param orderBy
	 * @param asc
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(int pageIndex, int pageSize,String orderBy,boolean asc) {
		return getPageAll(pageIndex ,pageSize ,orderBy ,asc ,true);
	}
	
	/**
	 * Has the updateDate and createDate and want to has no orderBy
	 * @param parameter
	 * @param orderFlag true or false has the same meaning : get the data without any order
	 * @return
	 */
	public Pagination<${BNAME}> getPageAll(int pageIndex, int pageSize,boolean orderFlag) {
		return getPageAll(pageIndex ,pageSize ,"" ,false ,false);
	}
	
	private Pagination<${BNAME}> getPageAll(int pageIndex, int pageSize,String orderBy,boolean asc,boolean order) {
		String sql ="$SQL_GET_BY_KEY" + $TABLE_WITH_AS;
		String countSql = "select count(*) from " + TABLE;
		Pagination<${BNAME}> page = new Pagination<${BNAME}>(pageIndex,pageSize);
		if(order){
			String orderSql = orderBy + (asc ? " asc":" desc"); 
			sql += (" order by $BNAME." + orderSql);
		}	
		this.paginationQuery(sql,countSql, page,ParameterizedBeanPropertyRowMapper.newInstance(${BNAME}.class));
		return page;
	}
	
	

	protected class ${BNAME}RowMapper implements RowMapper<${BNAME}> {
		public ${BNAME} mapRow(ResultSet rs, int rowNum) throws SQLException {
			${BNAME} ${BNAME_V} = new ${BNAME}();
#foreach($field in $beanClass.keyAttributes)
#set ( $getWithType = "get" + $field.type.substring(0,1).toUpperCase()+$field.type.substring(1))
#if ($field.type == "Integer")
#set ( $getWithType = "getInt" )
#end
        	${BNAME_V}.${field.setter}(rs.${getWithType}("$field.name"));
#end	
#foreach($field in $beanClass.nonKeyAttributes)
#set ( $getWithType = "get" + $field.type.substring(0,1).toUpperCase()+$field.type.substring(1))
#if ($field.type == "Integer")
#set ( $getWithType = "getInt" )
#end
			${BNAME_V}.${field.setter}(rs.${getWithType}("$field.name"));
#end
			return ${BNAME_V};
		}
	}
}