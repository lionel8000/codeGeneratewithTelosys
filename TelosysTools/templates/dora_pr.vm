#set ( $BNAME = "${beanClass.name}" )
#set ( $BNAME_V = $beanClass.name.substring(1,2).toLowerCase() + $beanClass.name.substring(2) )
#set ( $BNAME_DAO = ${beanClass.name} + "Dao" )
#set ( $BNAME_DAO_V = $BNAME_DAO.substring(0,1).toLowerCase() + $BNAME_DAO.substring(1) )
#set ( $KEYS = "" )
#foreach($singlekey in $beanClass.keyAttributes)
#set ( $KEYS = $KEYS+$singlekey.name.substring(0,1).toUpperCase()+$singlekey.name.substring(1))
#end
#set ( $KEYS_PAR = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_PAR = $KEYS_PAR+ "," + $field.type +" " + $field.name )
#end
#set ( $KEYS_PAR = $KEYS_PAR.substring(1) )
#set ( $KEYS_PAR_BEAN = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_PAR_BEAN = $KEYS_PAR_BEAN+ "," + $BNAME_V +"." + $field.getter+"()" )
#end
#set ( $KEYS_PAR_BEAN = $KEYS_PAR_BEAN.substring(1) )
#set ( $KEYS_TYPE = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_TYPE = $KEYS_TYPE+ "," + $field.type)
#end
#set ( $KEYS_TYPE = $KEYS_TYPE.substring(1) )
#set ( $KEYS_PAR_NODECLARE = "" )
#foreach($field in $beanClass.keyAttributes)
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE+ ","+$field.name )
#end
#set ( $KEYS_PAR_NODECLARE = $KEYS_PAR_NODECLARE.substring(1) )
#set ( $BNAME_SRPING_NAME = $BNAME.substring(1))
#set ( $$BNAME_SRPING_NAME = $$BNAME_SRPING_NAME.substring(0,1).toLowerCase() + $$BNAME_SRPING_NAME.substring(1))
#set ($FULLBEAN = $beanClass.fullName)
#set ($LASTINDEXTOFDOT = $FULLBEAN.lastIndexOf("."));
#set ($FULLBEAN = $FULLBEAN.substring(0,$LASTINDEXTOFDOT))
#set ($LASTINDEXTOFDOT = $FULLBEAN.lastIndexOf("."));
#set ($MODEL = $FULLBEAN.substring($LASTINDEXTOFDOT))
package ${target.javaPackageFromFolder($SRC)};

import com.kdkj.p2p.utils.ParameterCheck;
import $beanClass.fullName;
import com.kdkj.p2p.dao$MODEL.${BNAME}Dao;

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.bstek.bdf.pagination.Pagination;
import com.bstek.dorado.annotation.DataProvider;
import com.bstek.dorado.annotation.DataResolver;
import com.bstek.dorado.data.entity.EntityState;
import com.bstek.dorado.data.entity.EntityUtils;
import com.bstek.dorado.data.entity.FilterType;
import com.bstek.dorado.data.provider.Page;


@Component("${BNAME_SRPING_NAME}Controller")
public class ${BNAME}Controller{
   
   private static Logger log = LoggerFactory.getLogger(${BNAME}Controller.class);  

	@Autowired
	private ${BNAME}Dao ${BNAME_V}Dao;
	
	/**
	 * 
	 * 
	 * @param parameter
	 * @return
	 * @throws Exception
	 */
	//${BNAME_SRPING_NAME}Controller#getAll
	@DataProvider
	public Collection<$BNAME> getAll(Map<String, Object> parameter) throws Exception{
		if(ParameterCheck.hasValue(parameter)){
			return ${BNAME_V}Dao.getAll(parameter);
		}else{
			return ${BNAME_V}Dao.getAll();
		}
	}
	
   	//${BNAME_SRPING_NAME}Controller#getPageAll
	@DataProvider
	public void getPageAll(Page<$BNAME> page, Map<String, Object> parameter) throws Exception{

	    Pagination<${BNAME}> p = null;
		if(ParameterCheck.hasValue(parameter)){
			p=${BNAME_V}Dao.getPageAll(parameter ,page.getPageNo(), page.getPageSize());
		}else{
			p=${BNAME_V}Dao.getPageAllByCondition(page.getPageNo(), page.getPageSize());	
		}
		page.setEntities(p.getResults());
		page.setEntityCount(p.getTotalCount());
	}

	//${BNAME_SRPING_NAME}Controller#saveAll
	@DataResolver
	public void saveAll(Collection<$BNAME> coll) throws Exception{
		
		@SuppressWarnings("unchecked")
		Iterator<$BNAME> iter=EntityUtils.getIterator(coll, FilterType.DIRTY);
		while(iter.hasNext()){
			$BNAME $BNAME_V=iter.next();
			EntityState state=EntityUtils.getState($BNAME_V);
			if(state.equals(EntityState.NEW)){
				${BNAME_V}Dao.insertSelective($BNAME_V);
			}
			if(state.equals(EntityState.MODIFIED)){
				${BNAME_V}Dao.updateSelective($BNAME_V);
			}
			if(state.equals(EntityState.DELETED)){
				${BNAME_V}Dao.deleteBy$KEYS($KEYS_PAR_BEAN);
			}
		}
	}
}
