#set ( $LIST_CLASS = "${beanClass.name}List" )
#set ( $DAO_CLASS  = "${beanClass.name}DAO" )
##
#set ( $AUTO_INCR_KEY = false )
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.isAutoIncremented() )
#set ( $AUTO_INCR_KEY = true )
#end
#end
//-----------------------------------------------------------
// This is a generated class. Avoid customizing code here !
// Generated by $generator.name - version : $generator.version
// Date : $today.date - Time $today.time
//-----------------------------------------------------------
// This class was generated by the standard template
// Template name    : vo_dao.vm
// Template author  : Laurent GUERIN 
// Template version : 1.0.0 ( February 20 - 2009 ) 
//-----------------------------------------------------------
// With AutoIncremented KEY management
//-----------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)} ;

import java.sql.Connection;
import java.util.List;

import org.objectweb.telosys.common.TelosysException;
import org.objectweb.telosys.dal.dao.DatabaseSession;
import org.objectweb.telosys.dal.dao.ListQuery;
import org.objectweb.telosys.dal.dao.QueryContext;
import org.objectweb.telosys.dal.dao.SqlRequests;
import org.objectweb.telosys.dal.dao.StandardDAO;

import $beanClass.fullName;

/**
 * D.A.O. for entity table $beanClass.sqlTable
 * 
 *
 * @author TELOSYS-GENERATOR
 *
 */
public class ${DAO_CLASS} extends StandardDAO
{
    private final static String      TABLE          = "$beanClass.sqlTable";

    private final static String      KEY_COLUMNS[]  = { $beanClass.sqlKeyColumns };

    private final static String      DATA_COLUMNS[] = { $beanClass.sqlNonKeyColumns };

#if ( $AUTO_INCR_KEY == true )
    //--- Auto-incremented primary key : "$beanClass.autoincrementedKeyAttribute.databaseName"
    private final static SqlRequests SQL_REQUESTS   = new SqlRequests(TABLE, KEY_COLUMNS, DATA_COLUMNS, "$beanClass.autoincrementedKeyAttribute.databaseName");
#else
    private final static SqlRequests SQL_REQUESTS   = new SqlRequests(TABLE, KEY_COLUMNS, DATA_COLUMNS);
#end

    /**
     *  Constructs a DAO for the Value Object $beanClass
     */
    public ${DAO_CLASS}()
    {
        super(${beanClass}.class, SQL_REQUESTS );
    }
  
    //============================================================================
    // ABSTRACT METHODS IMPLEMENTATION : callback methods (called from super class)
    //============================================================================

    //============================================================================
    // Set the Primary Key parameters from the VO Bean values ( for SELECT & DELETE )
    //============================================================================
    protected void setPrimaryKey( QueryContext queryContext, Object entity ) throws TelosysException
    {
        ${beanClass} vo = (${beanClass}) entity ;
        int i = 0;
        //--- Set the SQL WHERE criteria ( Primary Key columns )
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.needsQuerySetterParams )
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}(), ${attr.querySetterParams}); // $attr.fullType : $attr.databaseName
#else
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}()); // $attr.fullType : $attr.databaseName
#end
#end
    }
  
    //============================================================================
    // Mapping : from SQL Table (ResultSet) to VO Bean ( for LOAD/SELECT )
    //============================================================================
    protected int tableToBean( QueryContext queryContext, Object entity ) throws TelosysException
    {
        ${beanClass} vo = (${beanClass}) entity ;
        int i = 0;
        //--- Data ( without the Primary Key )
#foreach( $attr in $beanClass.nonKeyAttributes )
#if ( $attr.needsQueryGetterParams )
        vo.${attr.setter}( queryContext.${attr.queryGetter}(++i, ${attr.queryGetterParams}) ); // $attr.fullType : $attr.databaseName
#else
        vo.${attr.setter}( queryContext.${attr.queryGetter}(++i) ); // $attr.fullType : $attr.databaseName
#end
#end
        //--- Primary Key 
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.needsQueryGetterParams )
        vo.${attr.setter}( queryContext.${attr.queryGetter}(++i, ${attr.queryGetterParams}) ); // $attr.fullType : $attr.databaseName
#else
        vo.${attr.setter}( queryContext.${attr.queryGetter}(++i) ); // $attr.fullType : $attr.databaseName
#end
#end
        //--- Return columns count
        return i ;
    }
  
    //============================================================================
    // Mapping : from SQL Table (ResultSet) to VO Bean 
    //============================================================================
    protected int beanToTable (QueryContext queryContext, Object entity ) throws TelosysException
    {
        ${beanClass} vo = (${beanClass}) entity ;
        int i = 0;
        //--- Data ( without the Primary Key )
#foreach( $attr in $beanClass.nonKeyAttributes )
#if ( $attr.needsQuerySetterParams )
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}(), ${attr.querySetterParams}); // $attr.fullType : $attr.databaseName
#else
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}()); // $attr.fullType : $attr.databaseName
#end
#end
        //--- Primary Key 
#foreach( $attr in $beanClass.keyAttributes )
#if ( $attr.needsQuerySetterParams )
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}(), ${attr.querySetterParams}); // $attr.fullType : $attr.databaseName
#else
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}()); // $attr.fullType : $attr.databaseName
#end
#end
        //--- Return columns count
        return i ;
    }

#if ( $AUTO_INCR_KEY == true )
    //============================================================================
    // Special mapping for tables with auto-incremented Primary Key ( for INSERT )
    //============================================================================
    protected int beanToTableWithoutAutoInc (QueryContext queryContext, Object entity ) throws TelosysException
    {
        ${beanClass} vo = (${beanClass}) entity ;
        int i = 0;
        //--- Data ( without the Primary Key )
#foreach( $attr in $beanClass.nonKeyAttributes )
#if ( $attr.needsQuerySetterParams )
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}(), ${attr.querySetterParams}); // $attr.fullType : $attr.databaseName
#else
        queryContext.${attr.querySetter}(++i, vo.${attr.getter}()); // $attr.fullType : $attr.databaseName
#end
#end
        //--- Primary Key not set in the SQL REQUEST 
#foreach( $attr in $beanClass.keyAttributes )
        // Column : $attr.databaseName
#end
        //--- Return columns count
        return i ;
    }
#end

    //============================================================================
    //  EXISTS
    //============================================================================
    /**
     * Tests if the Primary Key of the given Value Object exists in the database, <br>
     * using the default database
     * @param vo : the Value Object containing the Primary Key
     * @return : true if the primary key exists (else false)
     * @throws TelosysException
     */
    public boolean exists( ${beanClass} vo) throws TelosysException
    {
        return super.doExists(vo);
    }
    
    /**
     * Tests if the Primary Key of the given Value Object exists in the database, <br>
     * using a specific database id  
     * @param vo : the Value Object containing the Primary Key
     * @param dbId : the database id to use
     * @return : true if the primary key exists (else false)
     * @throws TelosysException
     */
    public boolean exists( ${beanClass} vo, int dbId ) throws TelosysException
    {
        return super.doExists(vo, dbId);
    }
    
    /**
     * Tests if the Primary Key of the given Value Object exists in the database, <br>
     * using a specific database connection  
     * @param vo : the Value Object containing the Primary Key
     * @param con : the connection to use
     * @return : true if the primary key exists (else false)
     * @throws TelosysException
     */
    public boolean exists( ${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doExists(vo, con);
    }
    
    /**
     * Tests if the Primary Key of the given Value Object exists in the database, <br>
     * using a specific database session  
     * @param vo : the Value Object containing the Primary Key
     * @param dbSession : the database session to use
     * @return : true if the primary key exists (else false)
     * @throws TelosysException
     */
    public boolean exists( ${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
        return super.doExists(vo, dbSession);
    }

    //============================================================================
    //  LOAD
    //============================================================================
    /**
     * Loads an single Value Object from the database ( with SQL select )<br>
     * using the default database
     * @param  vo  : the Value Object to load
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo) throws TelosysException
    {
        return super.doLoad(vo);
    }

    /**
     * Loads an single Value Object from the database ( with SQL select )<br>
     * with an optional SQL Select Clause ( ie "FOR UPDATE" ) <br>
     * using the default database
     * @param  vo  : the Value Object to load
     * @param  optionalClause : the optional clause ( ie "FOR UPDATE" )
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, String optionalClause) throws TelosysException
    {
        return super.doLoad(vo, optionalClause);
    }

    //------------------------------------------------------------------------------
    
    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * using a specific database id  
     * @param  vo  : the Value Object to load
     * @param  dbId : the database id to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, int dbId ) throws TelosysException
    {
        return super.doLoad(vo, dbId);
    }
  
    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * with an optional SQL Select Clause ( ie "FOR UPDATE" ) <br>
     * using a specific database id  
     * @param  vo  : the Value Object to load
     * @param  optionalClause : the optional clause ( ie "FOR UPDATE" )
     * @param  dbId : the database id to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, String optionalClause, int dbId ) throws TelosysException
    {
        return super.doLoad(vo, optionalClause, dbId);
    }
  
    //------------------------------------------------------------------------------
    
    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * using a specific database connection  
     * @param  vo  : the Value Object to load
     * @param  con : the connection to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doLoad(vo, con);
    }

    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * with an optional SQL Select Clause ( ie "FOR UPDATE" ) <br>
     * using a specific database connection  
     * @param  vo  : the Value Object to load
     * @param  optionalClause : the optional clause ( ie "FOR UPDATE" )
     * @param  con : the connection to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, String optionalClause, Connection con) throws TelosysException
    {
        return super.doLoad(vo, optionalClause, con);
    }
  
    //------------------------------------------------------------------------------
    
    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * using a specific database session  
     * @param  vo  : the Value Object to load
     * @param  dbSession : the database session to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
        return super.doLoad(vo, dbSession);
    }
  
    /**
     * Loads a single Value Object from the database ( with SQL select ) <br>
     * with an optional SQL Select Clause ( ie "FOR UPDATE" ) <br>
     * using a specific database session  
     * @param  vo  : the Value Object to load
     * @param  optionalClause : the optional clause ( ie "FOR UPDATE" )
     * @param  dbSession : the database session to use
     * @return The number of bean loaded ( 1 or 0 if not found )
     * @throws TelosysException
     */
    public int load( ${beanClass} vo, String optionalClause, DatabaseSession dbSession) throws TelosysException
    {
        return super.doLoad(vo, optionalClause, dbSession);
    }
  
    //============================================================================
    //  SAVE
    //============================================================================
    /**
     * Saves a single Value Object in the database ( with SQL insert or update )<br>
     * using the default database
     * @param  vo : the Value Object to save
     * @return the JDBC return value ( number of rows that were affected ) : allways 1
     * @throws TelosysException
     */
    public int save( ${beanClass} vo) throws TelosysException
    {
        return super.doSave(vo);
    }
  
    /**
     * Saves a single Value Object in the database ( with SQL insert or update ) <br>
     * using a specific database id
     * @param  vo : the Value Object to save
     * @param  dbId : the database Id to use
     * @return the JDBC return value ( number of rows that were affected ) : allways 1
     * @throws TelosysException
     */
    public int save( ${beanClass} vo, int dbId) throws TelosysException
    {
        return super.doSave(vo, dbId);
    }
  
    /**
     * Saves a single Value Object in the database ( with SQL insert or update ) <br>
     * using a specific database connection
     * @param  vo : the Value Object to save
     * @param  con : the connection to use
     * @return the JDBC return value ( number of rows that were affected ) : allways 1
     * @throws TelosysException
     */
    public int save( ${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doSave(vo, con);
    }
  
    /**
     * Saves a single Value Object in the database ( with SQL insert or update ) <br>
     * using a specific database session
     * @param  vo : the Value Object to save
     * @param  dbSession : the database session to use
     * @return the JDBC return value ( number of rows that were affected ) : allways 1
     * @throws TelosysException
     */
    public int save( ${beanClass} vo, DatabaseSession session) throws TelosysException
    {
        return super.doSave(vo, session);
    }
  
    //============================================================================
    //  INSERT
    //============================================================================
#if ( $AUTO_INCR_KEY == true )
    private void setAutoIncrementedKey( ${beanClass} vo, Long key) 
    {
#if ( ${beanClass.autoincrementedKeyAttribute.type} == "byte" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( key.byteValue() );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "short" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( key.shortValue() );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "int" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( key.intValue() );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "long" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( key.longValue() );
		
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "Byte" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( new Byte( key.byteValue() ) );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "Short" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( new Short( key.shortValue() ) );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "Integer" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( new Integer( key.intValue() ) );
#elseif ( ${beanClass.autoincrementedKeyAttribute.type} == "Long" )
        vo.${beanClass.autoincrementedKeyAttribute.setter}( key );
#else
        // ERROR : type ${beanClass.autoincrementedKeyAttribute.type} not supported 
		throw new TelosysException("Type ${beanClass.autoincrementedKeyAttribute.type} not supported");
#end
    }
#end
	
    /**
     * Inserts a single Value Object in the database ( with SQL insert )<br>
     * using the default database
     * @param  vo : the Value Object to insert
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int insert( ${beanClass} vo) throws TelosysException
    {
#if ( $AUTO_INCR_KEY == true )
        Long key = super.doInsertKeyGen(vo);
        setAutoIncrementedKey(vo, key);
        return 1 ;		
#else
        return super.doInsert(vo);
#end
    }
  
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database id
     * @param  vo : the Value Object to insert
     * @param  dbId : the database id to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int insert( ${beanClass} vo, int dbId ) throws TelosysException
    {
#if ( $AUTO_INCR_KEY == true )
        Long key = super.doInsertKeyGen(vo, dbId);
        setAutoIncrementedKey(vo, key);
        return 1 ;
#else
        return super.doInsert(vo, dbId);
#end
    }
    
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database connection
     * @param  vo : the Value Object to insert
     * @param  con : the connection to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int insert( ${beanClass} vo, Connection con) throws TelosysException
    {
#if ( $AUTO_INCR_KEY == true )
        Long key = super.doInsertKeyGen(vo, con);
        setAutoIncrementedKey(vo, key);
        return 1 ;
#else
        return super.doInsert(vo, con);
#end
    }
     
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database session
     * @param  vo : the Value Object to insert
     * @param  dbSession : the database session to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int insert( ${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
#if ( $AUTO_INCR_KEY == true )
        Long key = super.doInsertKeyGen(vo, dbSession);
        setAutoIncrementedKey(vo, key);
        return 1 ;
#else
        return super.doInsert(vo, dbSession);
#end
    }

#if ( $AUTO_INCR_KEY == true )
    //============================================================================
    //  INSERT WITH KEY GENERATION
    //============================================================================
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using the default database
     * and returns the value of the auto-generated key 
     * @param  vo : the Value Object to insert
     * @return the generated key ( wrapped in a Long object ) or null if none
     * @throws TelosysException
     */
    public Long insertKeyGen( ${beanClass} vo) throws TelosysException
    {
        return super.doInsertKeyGen(vo);
    }
  
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database id
     * and returns the value of the auto-generated key 
     * @param  vo : the Value Object to insert
     * @param  dbId : the database id to use
     * @return the generated key ( wrapped in a Long object ) or null if none
     * @throws TelosysException
     */
    public Long insertKeyGen( ${beanClass} vo, int dbId ) throws TelosysException
    {
        return super.doInsertKeyGen(vo, dbId);
    }
    
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database connection
     * and returns the value of the auto-generated key 
     * @param  vo : the Value Object to insert
     * @param  con : the connection to use
     * @return the generated key ( wrapped in a Long object ) or null if none
     * @throws TelosysException
     */
    public Long insertKeyGen( ${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doInsertKeyGen(vo, con);
    }
     
    /**
     * Inserts a single Value Object in the database ( with SQL insert ) <br>
     * using a specific database session
     * and returns the value of the auto-generated key 
     * @param  vo : the Value Object to insert
     * @param  dbSession : the database session to use
     * @return the generated key ( wrapped in a Long object ) or null if none
     * @throws TelosysException
     */
    public Long insertKeyGen( ${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
        return super.doInsertKeyGen(vo, dbSession);
    }
    
#end
    //============================================================================
    //  UPDATE
    //============================================================================
    /**
     * Updates a single Value Object in the database ( with SQL update )<br>
     * using the default database
     * @param  vo : the Value Object to update
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int update( ${beanClass} vo) throws TelosysException
    {
        return super.doUpdate(vo); 
    }
    
    /**
     * Updates a single Value Object in the database ( with SQL update )<br>
     * using a specific database id
     * @param  vo : the Value Object to update
     * @param  dbId : the database id to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int update( ${beanClass} vo, int dbId) throws TelosysException
    {
        return super.doUpdate(vo, dbId); 
    }
    
    /**
     * Updates a single Value Object in the database ( with SQL update ) <br>
     * using a specific database connection
     * @param  vo : the Value Object to update
     * @param  con : the database connection to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int update( ${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doUpdate(vo, con);
    }
    
    /**
     * Updates a single Value Object in the database ( with SQL update ) <br>
     * using a specific database session
     * @param  vo : the Value Object to update
     * @param  dbSession : the database session to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int update( ${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
        return super.doUpdate(vo, dbSession);
    }

    //============================================================================
    //  DELETE
    //============================================================================
    /**
     * Deletes a single Value Object in the database ( with SQL delete ) <br>
     * using the default database
     * @param  vo : the Value Object to delete
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int delete( ${beanClass} vo) throws TelosysException
    {
        return super.doDelete(vo);
    }
  
    /**
     * Deletes a single Value Object in the database ( with SQL delete ) <br>
     * using a specific database id
     * @param  vo : the Value Object to delete
     * @param  dbId : the database id to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int delete(${beanClass} vo, int dbId) throws TelosysException
    {
        return super.doDelete(vo, dbId); 
    }
  
    /**
     * Deletes a single Value Object in the database ( with SQL delete ) <br>
     * using a specific database connection
     * @param  vo : the Value Object to delete
     * @param  con : the database connection to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int delete(${beanClass} vo, Connection con) throws TelosysException
    {
        return super.doDelete(vo, con); 
    }
  
    /**
     * Deletes a single Value Object in the database ( with SQL delete ) <br>
     * using a specific database session
     * @param  vo : the Value Object to delete
     * @param  dbSession : the database session to use
     * @return the JDBC return value ( number of rows that were affected )
     * @throws TelosysException
     */
    public int delete(${beanClass} vo, DatabaseSession dbSession) throws TelosysException
    {
        return super.doDelete(vo, dbSession); 
    }

    //============================================================================
    //   LOAD LIST ( SELECT )
    //============================================================================
    /**
     * Loads a list of Value Objects according with the given query <br>
     * using the default database
     * @param query
     * @param list
     * @return
     * @throws TelosysException
     */
    public int loadList(ListQuery query, ${LIST_CLASS} list) throws TelosysException
    {
        return super.doLoadList(query, list);
    }

    /**
     * Loads a list of Value Objects according with the given query <br>
     * using a specific database id
     * @param query
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int loadList(ListQuery query, ${LIST_CLASS} list, int dbId) throws TelosysException
    {
        return super.doLoadList(query, list, dbId);
    }
    
    /**
     * Loads a list of Value Objects according with the given query <br>
     * using a specific database connection
     * @param query
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int loadList(ListQuery query, ${LIST_CLASS} list, Connection dbConnection) throws TelosysException
    {
        return super.doLoadList(query, list, dbConnection);
    }
    
    /**
     * Loads a list of Value Objects according with the given query <br>
     * using a specific database session
     * @param query
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int loadList(ListQuery query, ${LIST_CLASS} list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doLoadList(query, list, dbSession);
    }

    //============================================================================
    //   SAVE LIST ( DELETE ALL + INSERT ALL )
    //============================================================================
    /**
     * Saves a list of Value Objects by deleting all the existing items (according with the given query) <br>
     * and inserting all the items of the given list <br>
     * using the default database
     * @param query
     * @param list
     * @return
     * @throws TelosysException
     */
    public int saveList(ListQuery query, ${LIST_CLASS} list) throws TelosysException
    {
        return super.doSaveList(query, list);
    }
    
    /**
     * Saves a list of Value Objects by deleting all the existing items (according with the given query) <br>
     * and inserting all the items of the given list <br>
     * using a specific database id  
     * @param query
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int saveList(ListQuery query, ${LIST_CLASS} list, int dbId) throws TelosysException
    {
        return super.doSaveList(query, list, dbId);
    }
    
    /**
     * Saves a list of Value Objects by deleting all the existing items (according with the given query) <br>
     * and inserting all the items of the given list <br>
     * using a specific database connection  
     * @param query
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int saveList(ListQuery query, ${LIST_CLASS} list, Connection dbConnection) throws TelosysException
    {
        return super.doSaveList(query, list, dbConnection);
    }
    
    /**
     * Saves a list of Value Objects by deleting all the existing items (according with the given query) <br>
     * and inserting all the items of the given list <br>
     * using a specific database session
     * @param query
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int saveList(ListQuery query, ${LIST_CLASS} list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doSaveList(query, list, dbSession);
    }
    
    //============================================================================
    //   DELETE LIST BY QUERY CRITERIA
    //============================================================================
    /**
     * Deletes a list of records according with the given query criteria, <br>
     * using the default database
     * @param query
     * @return
     * @throws TelosysException
     */
    public int deleteList(ListQuery query) throws TelosysException
    {
        return super.doDeleteList(query);
    }

    /**
     * Deletes a list of records according with the given query criteria, <br>
     * using a specific database id  
     * @param query
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int deleteList(ListQuery query, int dbId) throws TelosysException
    {
        return super.doDeleteList(query, dbId);
    }

    /**
     * Deletes a list of records according with the given query criteria, <br>
     * using a specific database connection  
     * @param query
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int deleteList(ListQuery query, Connection dbConnection) throws TelosysException
    {
        return super.doDeleteList(query, dbConnection);
    }
    
    /**
     * Deletes a list of records according with the given query criteria, <br>
     * using a specific database session
     * @param query
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int deleteList(ListQuery query, DatabaseSession dbSession) throws TelosysException
    {
        return super.doDeleteList(query, dbSession);
    }

    //============================================================================
    //   INSERT VO-LIST ITEMS
    //============================================================================
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int insertList(${LIST_CLASS} list) throws TelosysException
    {
        return super.doInsertListItems(list);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int insertList(${LIST_CLASS} list, int dbId) throws TelosysException
    {
        return super.doInsertListItems(list, dbId);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int insertList(${LIST_CLASS} list, Connection dbConnection) throws TelosysException
    {
        return super.doInsertListItems(list, dbConnection);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int insertList(${LIST_CLASS} list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doInsertListItems(list, dbSession);
    }

    //============================================================================
    //   INSERT GENERIC LIST ITEMS
    //============================================================================
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int insertList(List<${beanClass}> list) throws TelosysException
    {
        return super.doInsertListItems(list);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int insertList(List<${beanClass}> list, int dbId) throws TelosysException
    {
        return super.doInsertListItems(list, dbId);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int insertList(List<${beanClass}> list, Connection dbConnection) throws TelosysException
    {
        return super.doInsertListItems(list, dbConnection);
    }
    
    /**
     * Inserts each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int insertList(List<${beanClass}> list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doInsertListItems(list, dbSession);
    }

    //============================================================================
    //   UPDATE VO-LIST ITEMS
    //============================================================================
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int updateList(${LIST_CLASS} list) throws TelosysException
    {
        return super.doUpdateListItems(list);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int updateList(${LIST_CLASS} list, int dbId) throws TelosysException
    {
        return super.doUpdateListItems(list, dbId);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int updateList(${LIST_CLASS} list, Connection dbConnection) throws TelosysException
    {
        return super.doUpdateListItems(list, dbConnection);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int updateList(${LIST_CLASS} list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doUpdateListItems(list, dbSession);
    }
    
    //============================================================================
    //   UPDATE GENERIC LIST ITEMS
    //============================================================================
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int updateList(List<${beanClass}> list) throws TelosysException
    {
        return super.doUpdateListItems(list);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int updateList(List<${beanClass}> list, int dbId) throws TelosysException
    {
        return super.doUpdateListItems(list, dbId);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int updateList(List<${beanClass}> list, Connection dbConnection) throws TelosysException
    {
        return super.doUpdateListItems(list, dbConnection);
    }
    
    /**
     * Updates each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int updateList(List<${beanClass}> list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doUpdateListItems(list, dbSession);
    }

    //============================================================================
    //   DELETE VO-LIST ITEMS
    //============================================================================
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int deleteList(${LIST_CLASS} list) throws TelosysException
    {
        return super.doDeleteListItems(list);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int deleteList(${LIST_CLASS} list, int dbId) throws TelosysException
    {
        return super.doDeleteListItems(list, dbId);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int deleteList(${LIST_CLASS} list, Connection dbConnection) throws TelosysException
    {
        return super.doDeleteListItems(list, dbConnection);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int deleteList(${LIST_CLASS} list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doDeleteListItems(list, dbSession);
    }

    //============================================================================
    //   DELETE GENERIC LIST ITEMS
    //============================================================================
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using the default database
     * @param list
     * @return
     * @throws TelosysException
     */
    public int deleteList(List<${beanClass}> list) throws TelosysException
    {
        return super.doDeleteListItems(list);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database id  
     * @param list
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int deleteList(List<${beanClass}> list, int dbId) throws TelosysException
    {
        return super.doDeleteListItems(list, dbId);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database connection  
     * @param list
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int deleteList(List<${beanClass}> list, Connection dbConnection) throws TelosysException
    {
        return super.doDeleteListItems(list, dbConnection);
    }
    
    /**
     * Deletes each Value Object of the given list (item by item), <br>
     * using a specific database session
     * @param list
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int deleteList(List<${beanClass}> list, DatabaseSession dbSession) throws TelosysException
    {
        return super.doDeleteListItems(list, dbSession);
    }

    //============================================================================
    //   COUNT
    //============================================================================
    /**
     * Counts the number of records according with the given query, <br>
     * using the default database
     * @param query
     * @return
     * @throws TelosysException
     */
    public int count(ListQuery query) throws TelosysException
    {
        return super.doCount(query);
    }
    
    /**
     * Counts the number of records according with the given query, <br>
     * using a specific database id  
     * @param query
     * @param dbId
     * @return
     * @throws TelosysException
     */
    public int count(ListQuery query, int dbId) throws TelosysException
    {
        return super.doCount(query, dbId);
    }
    
    /**
     * Counts the number of records according with the given query, <br>
     * using a specific database connection  
     * @param query
     * @param dbConnection
     * @return
     * @throws TelosysException
     */
    public int count(ListQuery query, Connection dbConnection) throws TelosysException
    {
        return super.doCount(query, dbConnection);
    }
    
    /**
     * Counts the number of records according with the given query, <br>
     * using a specific database session
     * @param query
     * @param dbSession
     * @return
     * @throws TelosysException
     */
    public int count(ListQuery query, DatabaseSession dbSession) throws TelosysException
    {
        return super.doCount(query, dbSession);
    }

}